---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template to create a Cloud9 environment and an EKS cluster. Please allow ~20min for the EKS cluster to be ready.
Metadata:
  Author:
    Description: Jagdeep Phoolkumar <jphoolku@amazon.com>
Parameters:
  C9InstanceType:
    Description: Example Cloud9 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
    ConstraintDescription: Must be a valid Cloud9 instance type
  C9KubectlVersion:
    Description: Cloud9 instance kubectl version
    Type: String
    Default: v1.21.2
    ConstraintDescription: Must be a valid kubectl version
  C9KubectlVersionTEST:
    Description: Cloud9 instance kubectl version
    Type: String
    Default: v1.21.2
    ConstraintDescription: Must be a valid kubectl version
  C9EKSctlVersion:
    Description: Cloud9 instance eksctl version
    Type: String
    Default: v0.68.0
    ConstraintDescription: Must be a valid eksctl version
  C9ConsoleSession:
    Description: Name of Console user/role session
    Type: String
    Default: jphoolku-Isengard

  EKSClusterVersion:
    Description: EKS Cluster Version
    Type: String
    Default: 1.21
    ConstraintDescription: Must be a valid eks version
  EKSClusterName:
    Description: EKS Cluster Name
    Type: String
    Default: eks-demo
  EKSNGAName:
    Description: EKS Node Group A Name
    Type: String
    Default: mng-cntrl-x86
  EKSNGAInstanceType:
    Description: EKS Node Group A EC2 Instance Type
    Type: String
    Default: m5.large
  EKSNGALabelKey:
    Description: EKS Node Group A Label Key
    Type: String
    Default: intent
  EKSNGALabelValue:
    Description: EKS Node Group A Label Value
    Type: String
    Default: control-apps

  EKSNGBName:
    Description: EKS Node Group B Name
    Type: String
    Default: mng-agnts-x86
  EKSNGBInstanceType:
    Description: EKS Node Group B EC2 Instance Type
    Type: String
    Default: m5.large
  EKSNGBLabelKey:
    Description: EKS Node Group B Label Key
    Type: String
    Default: intent
  EKSNGBLabelValue:
    Description: EKS Node Group B Label Value
    Type: String
    Default: jenkins-agents


  EKSNGCName:
    Description: EKS Node Group C Name
    Type: String
    Default: mng-agnts-arm
  EKSNGCInstanceType:
    Description: EKS Node Group C EC2 Instance Type
    Type: String
    Default: m6g.large
  EKSNGCLabelKey:
    Description: EKS Node Group C Label Key
    Type: String
    Default: intent
  EKSNGCLabelValue:
    Description: EKS Node Group C Label Value
    Type: String
    Default: jenkins-agents

  C9JenkinsControllerTag:
    Description: Cloud9 instance Jenkins Controller Tag
    Type: String
    Default: 2.303.2-lts-jdk11
    ConstraintDescription: Must be a valid Jenkins Controller Tag
  C9JenkinsAgentsTag:
    Description: Cloud9 instance Jenkins Agents Tag
    Type: String
    Default: 4.11-1
    ConstraintDescription: Must be a valid Jenkins Agents Tag

Resources:
################## PERMISSIONS AND ROLES #################
  C9Role:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: Environment
          Value: AWS Example
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ssm.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AdministratorAccess
      Path: "/"

  C9LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName:
          Fn::Join:
          - ''
          - - C9LambdaPolicy-
            - Ref: AWS::Region
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStackResource
            - cloudformation:DescribeStackResources
            - ec2:DescribeInstances
            - ec2:AssociateIamInstanceProfile
            - ec2:ModifyInstanceAttribute
            - ec2:ReplaceIamInstanceProfileAssociation
            - ec2:DescribeIamInstanceProfileAssociations
            - ec2:DisassociateIamInstanceProfile
            - iam:ListInstanceProfiles
            - iam:PassRole
            Resource: "*"

################## LAMBDA BOOTSTRAP FUNCTION ################

  C9BootstrapInstanceLambda:
    Description: Bootstrap Cloud9 instance
    Type: Custom::C9BootstrapInstanceLambda
    DependsOn:
    - C9BootstrapInstanceLambdaFunction
    - C9Instance
    - C9LambdaExecutionRole
    Properties:
      Tags:
        - Key: Environment
          Value: AWS Example
      ServiceToken:
        Fn::GetAtt:
        - C9BootstrapInstanceLambdaFunction
        - Arn
      REGION:
        Ref: AWS::Region
      StackName:
        Ref: AWS::StackName
      EnvironmentId:
        Ref: C9Instance
      LabIdeInstanceProfileArn: !GetAtt C9InstanceProfile.Arn

  C9BootstrapInstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: Environment
          Value: AWS Example
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - C9LambdaExecutionRole
        - Arn
      Runtime: python3.6
      MemorySize: 256
      Timeout: '600'
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          # import logging
          import json
          import os
          import time
          import traceback
          import cfnresponse

          # logging.basicConfig(level=logging.INFO)
          # logger = logging.getLogger(__name__)

          def lambda_handler(event, context):
              # logger.info('event: {}'.format(event))
              # logger.info('context: {}'.format(context))
              responseData = {}

              if event['RequestType'] == 'Create':
                  try:
                      # Open AWS clients
                      ec2 = boto3.client('ec2')

                      # Get the InstanceId of the Cloud9 IDE
                      # print(str({'Name': 'tag:aws:cloud9:environment','Values': [event['ResourceProperties']['EnvironmentId']]}))
                      instance = ec2.describe_instances(Filters=[{'Name': 'tag:aws:cloud9:environment','Values': [event['ResourceProperties']['EnvironmentId']]}])['Reservations'][0]['Instances'][0]
                      # logger.info('instance: {}'.format(instance))

                      # Create the IamInstanceProfile request object
                      iam_instance_profile = {
                          'Arn': event['ResourceProperties']['LabIdeInstanceProfileArn']
                      }
                      # logger.info('iam_instance_profile: {}'.format(iam_instance_profile))

                      # Wait for Instance to become ready before adding Role
                      instance_state = instance['State']['Name']
                      # logger.info('instance_state: {}'.format(instance_state))
                      while instance_state != 'running':
                          time.sleep(5)
                          instance_state = ec2.describe_instances(InstanceIds=[instance['InstanceId']])
                        # logger.info('instance_state: {}'.format(instance_state))

                      # Check existing instance profile associations
                      association_id = ec2.describe_iam_instance_profile_associations(
                          Filters=[
                              {
                                  'Name': 'instance-id',
                                  'Values': [instance['InstanceId'],]
                              },
                          ],
                      )['IamInstanceProfileAssociations'][0]['AssociationId']
                      # print(association_id)

                      # Disassociate existing instance profile associations
                      response = ec2.disassociate_iam_instance_profile(AssociationId=association_id)
  
                      # attach instance profile
                      response = ec2.associate_iam_instance_profile(IamInstanceProfile=iam_instance_profile, InstanceId=instance['InstanceId'])
                      # logger.info('response - associate_iam_instance_profile: {}'.format(response))
                      r_ec2 = boto3.resource('ec2')

                      responseData = {'Success': 'Started bootstrapping for instance: '+instance['InstanceId']}
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, 'CustomResourcePhysicalID')

                  except Exception as e:
                      responseData = {'Error': str(e)}
                      cfnresponse.send(event, context, cfnresponse.FAILED, responseData, 'CustomResourcePhysicalID')

################## SSM BOOTSTRAP HANDLER ###############
  C9OutputBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

  C9SSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Tags:
        - Key: Environment
          Value: AWS Example
      Content: Yaml
      DocumentType: Command
      Content:
        schemaVersion: '2.2'
        description: Bootstrap Cloud9 Instance
        mainSteps:
        - action: aws:runShellScript
          name: C9bootstrap
          inputs:
            runCommand:
            - "#!/bin/bash"
            - echo '=== Setting up Variables ===' 
            - !Sub 'export Cluster_Name=${EKSClusterName}'
            - !Sub 'export KUBECTL_VERSION=${C9KubectlVersion}'
            - !Sub 'export EKSCTL_VERSION=${C9EKSctlVersion}'
            - !Sub 'export Session_Name=${C9ConsoleSession}'

            - echo '=== INSTALL kubectl ==='          
            - curl --silent --location -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl
            - chmod +x /usr/local/bin/kubectl

            - echo '=== Install JQ and envsubst ==='
            - sudo yum -y install jq gettext

            - echo '=== Update to the latest AWS CLI ==='
            - /usr/local/bin/aws --version
            - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            - unzip awscliv2.zip
            - sudo ./aws/install
            - /usr/local/bin/aws --version

            - echo '=== setup AWS configs ==='
            - rm -vf /home/ec2-user/.aws/credentials
            - rm -vf ~/.aws/credentials
            - export ACCOUNT_ID=$(/usr/local/bin/aws sts get-caller-identity --output text --query Account)
            - export AWS_REGION=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.region')
            - echo "export ACCOUNT_ID=${ACCOUNT_ID}" >> ~/.bash_profile
            - echo "export AWS_REGION=${AWS_REGION}" >> ~/.bash_profile
            - echo "export ACCOUNT_ID=${ACCOUNT_ID}" >> /home/ec2-user/.bash_profile
            - echo "export AWS_REGION=${AWS_REGION}" >> /home/ec2-user/.bash_profile
            - /usr/local/bin/aws configure set default.region ${AWS_REGION}
            - /usr/local/bin/aws configure get default.region
            - /usr/local/bin/aws sts get-caller-identity

            - echo '=== Get Cloud9 Environment Credentials ==='
            - export c9InstanceId=$(curl -s 169.254.169.254/latest/dynamic/instance-identity/document | jq -r '.instanceId')
            - export c9EnvID=$(/usr/local/bin/aws ec2 describe-tags --filters "Name=resource-id,Values=${c9InstanceId}" --output text --query 'Tags[?Key==`aws:cloud9:environment`].Value')
            - export c9builderArn=$(/usr/local/bin/aws cloud9 describe-environment-memberships --environment-id=${c9EnvID} | jq -r '.memberships[].userArn')

            - 'if echo ${c9builderArn} | grep -q user; then'
            - '     export builderArn=${c9builderArn}'
            - '     echo "Role ARN: ${builderArn}"'
            - 'elif echo ${c9builderArn} | grep -q assumed-role; then'
            - '      export assumedrolename=$(echo ${c9builderArn} | awk -F/ ''{print $(NF-1)}'')'
            - '      export builderArn=$(/usr/local/bin/aws iam get-role --role-name ${assumedrolename} --query Role.Arn --output text)'
            - '      echo "Role ARN: ${builderArn}"'
            - fi

            - echo '=== Update Cloud9 Instance Role Policy to assume' ${assumedrolename} '==='
            - export builderName=$(echo ${builderArn} | awk -F/ '{print $(NF)}')
            - /usr/local/bin/aws iam get-role --role-name ${builderName} | jq .Role.AssumeRolePolicyDocument | sudo -u ec2-user tee /home/ec2-user/environment/builder-trust-policy.json > /dev/null
 
            - export c9InstanceProfileArn=$(/usr/local/bin/aws ec2 describe-instances --instance-id ${c9InstanceId} --query 'Reservations[*].Instances[*].IamInstanceProfile[].Arn' --output text)
            - export c9InstanceProfileName=$(echo ${c9InstanceProfileArn} | awk -F/ '{print $(NF)}')
            - export c9InstanceRoleArn=$(/usr/local/bin/aws iam get-instance-profile --instance-profile-name ${c9InstanceProfileName} --query 'InstanceProfile.Roles[].Arn' --output text)
            - sudo -u ec2-user curl --silent --location -o /home/ec2-user/environment/c9builder-trust-policy.json "https://raw.githubusercontent.com/jagpk/one-click-demos/main/static/code/cfn/c9builder-trust-policy.json"
            - sudo -u ec2-user sed -i.bak "s|--c9InstanceRoleArn--|${c9InstanceRoleArn}|g" /home/ec2-user/environment/c9builder-trust-policy.json
            - 'jq -s ''def deepmerge(a;b):'
            - '   reduce b[] as $item (a;'
            - '     reduce ($item | keys_unsorted[]) as $key (.;'
            - '       $item[$key] as $val | ($val | type) as $type | .[$key] = if ($type == "object") then'
            - '         deepmerge({}; [if .[$key] == null then {} else .[$key] end, $val])'
            - '      elif ($type == "array") then'
            - '         (.[$key] + $val | unique)'
            - '       else'
            - '         $val'
            - '       end)'
            - '     );'
            - '   deepmerge({}; .)'' /home/ec2-user/environment/builder-trust-policy.json /home/ec2-user/environment/c9builder-trust-policy.json | sudo -u ec2-user tee /home/ec2-user/environment/builder-c9-trust-policy.json > /dev/null'

            - /usr/local/bin/aws iam update-assume-role-policy --role-name ${builderName} --policy-document file:///home/ec2-user/environment/builder-c9-trust-policy.json

            - sudo -u ec2-user curl --silent --location -o /home/ec2-user/environment/c9instance-trust-policy.json "https://raw.githubusercontent.com/jagpk/one-click-demos/main/static/code/cfn/c9instance-trust-policy.json"
            - sudo -u ec2-user sed -i.bak -e "s|--c9BuilderRoleArn--|${builderArn}|" /home/ec2-user/environment/c9instance-trust-policy.json
           
            - export c9InstanceRoleName=$(echo ${c9InstanceRoleArn} | awk -F/ '{print $(NF)}')
            - /usr/local/bin/aws iam put-role-policy --role-name ${c9InstanceRoleName} --policy-name assume-builder-role --policy-document file:///home/ec2-user/environment/c9instance-trust-policy.json
            
            - echo '=== Put to Sleep for 300 seconds to apply new policies ==='
            - sleep 300

            - /usr/local/bin/aws sts assume-role --role-arn ${builderArn} --role-session-name ${Session_Name} > /home/ec2-user/environment/assume-role-output.txt
            - export AWS_ACCESS_KEY_ID="$(cat /home/ec2-user/environment/assume-role-output.txt | jq -r ".Credentials.AccessKeyId")"
            - export AWS_SECRET_ACCESS_KEY="$(cat /home/ec2-user/environment/assume-role-output.txt | jq -r ".Credentials.SecretAccessKey")"
            - export AWS_SESSION_TOKEN="$(cat /home/ec2-user/environment/assume-role-output.txt | jq -r ".Credentials.SessionToken")"
            - sudo -u ec2-user rm -rf /home/ec2-user/environment/assume-role-output.txt
            - /usr/local/bin/aws iam update-assume-role-policy --role-name ${builderName} --policy-document file:///home/ec2-user/environment/builder-trust-policy.json
            
            - /usr/local/bin/aws sts get-caller-identity
            - /usr/local/bin/aws cloud9 update-environment --environment-id ${c9EnvID} --managed-credentials-action DISABLE
            - unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
            - /usr/local/bin/aws sts get-caller-identity

            - echo '=== Cleanup Assumed Access ==='
            - /usr/local/bin/aws iam update-assume-role-policy --role-name ${builderName} --policy-document file:///home/ec2-user/environment/builder-trust-policy.json

            - echo '=== Generate SSH key and import to aws ==='          
            - ssh-keygen -f /home/ec2-user/.ssh/id_rsa1 -P ''
            - /usr/local/bin/aws ec2 import-key-pair --key-name ${Cluster_Name} --public-key-material file:///home/ec2-user/.ssh/id_rsa1.pub

            - echo '=== Install EKSCTL ==='
            - curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/${EKSCTL_VERSION}/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /usr/local/bin
            - /usr/local/bin/eksctl version

            - echo '=== Substitute Variables in eks-demo.yaml ==='
            - sudo -u ec2-user curl --silent --location -o /home/ec2-user/environment/eks-demo.yaml "https://raw.githubusercontent.com/jagpk/one-click-demos/main/static/code/cfn/eks-cluster.yaml"
            - !Sub sed -i.bak -e 's/--AWS_REGION--/${AWS::Region}/' /home/ec2-user/environment/eks-demo.yaml
            - !Sub sed -i.bak -e 's/--AZA--/${AWS::Region}a/' /home/ec2-user/environment/eks-demo.yaml
            - !Sub sed -i.bak -e 's/--AZB--/${AWS::Region}b/' /home/ec2-user/environment/eks-demo.yaml
            - !Sub sed -i.bak -e 's/--CLUSTER-NAME--/${EKSClusterName}/g' /home/ec2-user/environment/eks-demo.yaml
            - !Sub sed -i.bak -e 's/--EKS_VERSION--/"'"${EKSClusterVersion}"'"/' /home/ec2-user/environment/eks-demo.yaml
            - !Sub sed -i.bak -e 's/--NG-A-EC2--/${EKSNGAInstanceType}/g' /home/ec2-user/environment/eks-demo.yaml
            - !Sub sed -i.bak -e 's/--NG-A-NAME--/${EKSNGAName}/g' /home/ec2-user/environment/eks-demo.yaml
            - !Sub sed -i.bak -e 's/--NG-A-KEY--/${EKSNGALabelKey}/g' /home/ec2-user/environment/eks-demo.yaml 
            - !Sub sed -i.bak -e 's/--NG-A-VAL--/${EKSNGALabelValue}/g' /home/ec2-user/environment/eks-demo.yaml        
            - !Sub sed -i.bak -e 's/--NG-B-EC2--/${EKSNGBInstanceType}/g' /home/ec2-user/environment/eks-demo.yaml
            - !Sub sed -i.bak -e 's/--NG-B-NAME--/${EKSNGBName}/g' /home/ec2-user/environment/eks-demo.yaml
            - !Sub sed -i.bak -e 's/--NG-B-KEY--/${EKSNGBLabelKey}/g' /home/ec2-user/environment/eks-demo.yaml 
            - !Sub sed -i.bak -e 's/--NG-B-VAL--/${EKSNGBLabelValue}/g' /home/ec2-user/environment/eks-demo.yaml        
            - !Sub sed -i.bak -e 's/--NG-C-EC2--/${EKSNGCInstanceType}/g' /home/ec2-user/environment/eks-demo.yaml
            - !Sub sed -i.bak -e 's/--NG-C-NAME--/${EKSNGCName}/g' /home/ec2-user/environment/eks-demo.yaml
            - !Sub sed -i.bak -e 's/--NG-C-KEY--/${EKSNGCLabelKey}/g' /home/ec2-user/environment/eks-demo.yaml
            - !Sub sed -i.bak -e 's/--NG-C-VAL--/${EKSNGCLabelValue}/g' /home/ec2-user/environment/eks-demo.yaml

            - echo '=== Create EKS Cluster ==='
            - /usr/local/bin/eksctl create cluster -f /home/ec2-user/environment/eks-demo.yaml
            - /usr/local/bin/kubectl get nodes

            - echo '=== Create IAM identity mapping for C9 Owner ==='
            - /usr/local/bin/eksctl create iamidentitymapping --cluster ${Cluster_Name} --arn ${builderArn} --group system:masters --username admin
            - /usr/local/bin/kubectl describe configmap -n kube-system aws-auth
            
            - echo '=== Install Helm ==='
            - curl -sSL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
            - /usr/local/bin/helm repo add stable https://charts.helm.sh/stable/
            - /usr/local/bin/helm repo update
            - /usr/local/bin/helm search repo stable
            - /usr/local/bin/helm completion bash >> ~/.bash_completion
            - . ~/.bash_completion
            - source <(helm completion bash)

            - echo '=== Deploy the Metric Server ==='
            - /usr/local/bin/kubectl create namespace metrics
            - /usr/local/bin/helm install metrics-server stable/metrics-server --version 2.11.4 --namespace metrics

            - echo '=== Install KUBE-OPS-VIEW ==='
            - /usr/local/bin/helm install kube-ops-view stable/kube-ops-view --set service.type=LoadBalancer --set nodeSelector.intent=control-apps --version 1.2.4 --set rbac.create=True
             
            - echo '=== Install Cluster Autoscaler ==='
            - sudo -u ec2-user mkdir -p /home/ec2-user/environment/cluster-autoscaler
            - sudo -u ec2-user curl -o /home/ec2-user/environment/cluster-autoscaler/cluster_autoscaler.yml https://raw.githubusercontent.com/awslabs/ec2-spot-workshops/master/content/using_ec2_spot_instances_with_eks/060_scaling/deploy_ca.files/cluster_autoscaler.yml
            - !Sub sed -i.bak -e 's/--AWS_REGION--/${AWS::Region}/g' /home/ec2-user/environment/cluster-autoscaler/cluster_autoscaler.yml
            - /usr/local/bin/kubectl apply -f /home/ec2-user/environment/cluster-autoscaler/cluster_autoscaler.yml

            - echo '=== SETTING UP JENKINS SERVER ==='
            - /usr/local/bin/helm repo add jenkins https://charts.jenkins.io
            - sudo -u ec2-user curl -o /home/ec2-user/environment/jenkins/jenkins-values.yaml https://raw.githubusercontent.com/jagpk/one-click-demos/main/static/code/cfn/jenkins-values.yaml
            - !Sub sed -i.bak -e 's/--JENKINS-CNTRL-TAG--/${C9JenkinsControllerTag}/g' /home/ec2-user/environment/jenkins/jenkins-values.yaml
            - !Sub sed -i.bak -e 's/--NG-A-KEY--/${EKSNGALabelKey}/g' /home/ec2-user/environment/jenkins/jenkins-values.yaml
            - !Sub sed -i.bak -e 's/--NG-A-VAL--/${EKSNGALabelValue}/g' /home/ec2-user/environment/jenkins/jenkins-values.yaml
            - !Sub sed -i.bak -e 's/--JENKINS-AGNT-TAG--/${C9JenkinsAgentsTag}/g' /home/ec2-user/environment/jenkins/jenkins-values.yaml
            - !Sub sed -i.bak -e 's/--NG-B-KEY--/${EKSNGBLabelKey}/g' /home/ec2-user/environment/jenkins/jenkins-values.yaml
            - !Sub sed -i.bak -e 's/--NG-B-VAL--/${EKSNGBLabelValue}/g' /home/ec2-user/environment/jenkins/jenkins-values.yaml
            - !Sub sed -i.bak -e 's/--NG-C-KEY--/${EKSNGCLabelKey}/g' /home/ec2-user/environment/jenkins/jenkins-values.yaml
            - !Sub sed -i.bak -e 's/--NG-C-VAL--/${EKSNGCLabelValue}/g' /home/ec2-user/environment/jenkins/jenkins-values.yaml
            - /usr/local/bin/helm install cicd jenkins/jenkins -f /home/ec2-user/environment/jenkins/jenkins-values.yaml

  C9BootstrapAssociation:
    Type: AWS::SSM::Association
    DependsOn:
    - C9OutputBucket
    - C9BootstrapInstanceLambda
    Properties:
      Name: !Ref C9SSMDocument
      OutputLocation:
        S3Location:
          OutputS3BucketName: !Ref C9OutputBucket
          OutputS3KeyPrefix: bootstrapoutput
      Targets:
        - Key: tag:c9Environment
          Values:
          - Ref: AWS::StackName


################## Cloud9 Environment #####################
  C9InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: C9Role
  C9Instance:
    Description: "-"
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: AWS Cloud9 instance for Examples
      AutomaticStopTimeMinutes: 3600
      InstanceType:
        Ref: C9InstanceType
      Name: 
        Ref: AWS::StackName
      Tags:
        -
          Key: c9Environment
          Value:
            Ref: AWS::StackName

Outputs:
  Cloud9IDE:
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: AWS::Region
        - ".console.aws.amazon.com/cloud9/ide/"
        - Ref: C9Instance
        - "?region="
        - Ref: AWS::Region

  EKSCluster:
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: AWS::Region
        - ".console.aws.amazon.com/eks/home"
        - "?region="
        - Ref: AWS::Region
        - "#/clusters/"
        - Ref: EKSClusterName
  EKSClusterVersion:
    Value: !Ref EKSClusterVersion